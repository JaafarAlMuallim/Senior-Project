generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String         @id @default(cuid())
    email        String         @unique
    name         String
    clerkId      String         @unique @default(cuid())
    password     String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    profileId    String?
    groupId      String?
    Admin        Admin[]
    Feedback     Feedback[]
    Message      Message[]
    Notification Notification[]
    Participant  Participant[]
    Profile      Profile?
    Registration Registration[]
    Student      Student[]
    Tutor        Tutor[]
    Group        Group[]        @relation("GroupToUser")
}

model Tutor {
    id           String         @id @default(cuid())
    userId       String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Availability Availability[]
    CourseTutor  CourseTutor[]
    Session      Session[]
    user         User           @relation(fields: [userId], references: [id])
}

model Course {
    id          String        @id @default(cuid())
    name        String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    code        String
    Assistant   Assistant?
    CourseTutor CourseTutor[]
    Group       Group?
    Material    Material[]
    Quiz        Quiz[]
    Section     Section[]
    Session     Session[]
}

model Section {
    id           String         @id @default(cuid())
    title        String
    startTime    DateTime
    endTime      DateTime
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    recurrence   String?
    instructor   String         @default("TBD")
    location     String         @default("TBD")
    registration Registration[]
    course       Course         @relation(fields: [courseId], references: [id])
    courseId     String
}

model CourseTutor {
    id        String   @id @default(cuid())
    courseId  String
    tutorId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    grade     String
    course    Course   @relation(fields: [courseId], references: [id])
    tutor     Tutor    @relation(fields: [tutorId], references: [id])
}

model Student {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
}

model Admin {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
}

model Profile {
    id         String   @id @default(cuid())
    userId     String   @unique
    major      String?
    phone      String?
    university String?
    standing   String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [clerkId])
}

model Material {
    id        String   @id @default(cuid())
    content   String
    courseId  String
    title     String
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tagId     String?
    course    Course   @relation(fields: [courseId], references: [id])
    Tag       Tag?     @relation(fields: [tagId], references: [id])
}

model Quiz {
    id        String     @id @default(cuid())
    courseId  String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Question  Question[]
    course    Course     @relation(fields: [courseId], references: [id])
}

model Question {
    id            String   @id @default(cuid())
    options       String[]
    correctAnswer String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    quizId        String?
    Quiz          Quiz?    @relation(fields: [quizId], references: [id])
}

model Session {
    id        String   @id @default(cuid())
    courseId  String
    title     String
    startTime DateTime
    tutorId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    date      DateTime
    course    Course   @relation(fields: [courseId], references: [id])
    tutor     Tutor    @relation(fields: [tutorId], references: [id])
}

model Participant {
    id        String    @id @default(cuid())
    userId    String
    groupId   String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Message   Message[]
    group     Group     @relation(fields: [groupId], references: [id])
    user      User      @relation(fields: [userId], references: [id])
}

model Message {
    id        String      @id @default(cuid())
    content   String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    senderId  String
    groupId   String
    userId    String?
    group     Group       @relation(fields: [groupId], references: [id])
    sender    Participant @relation(fields: [senderId], references: [id])
    User      User?       @relation(fields: [userId], references: [id])
}

model Group {
    id          String        @id @default(cuid())
    name        String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    courseId    String        @unique
    Course      Course        @relation(fields: [courseId], references: [id])
    Message     Message[]
    Participant Participant[]
    User        User[]        @relation("GroupToUser")
}

model Notification {
    id        String   @id @default(cuid())
    content   String
    seen      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}

model Feedback {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}

model Assistant {
    id        String   @id @default(cuid())
    courseId  String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    course    Course   @relation(fields: [courseId], references: [id])
}

model Report {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id        String     @id @default(cuid())
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    material  Material[]
}

model Registration {
    id        String   @id @default(cuid())
    sectionId String
    userId    String
    semester  String   @default("241")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    section   Section  @relation(fields: [sectionId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
}

model Availability {
    id        String   @id @default(cuid())
    day       String
    startTime DateTime
    endTime   DateTime
    tutorId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tutor     Tutor    @relation(fields: [tutorId], references: [id])
}
