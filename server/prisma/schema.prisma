// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String         @id @default(cuid())
    email        String         @unique
    name         String
    clerkId      String         @unique @default(cuid())
    password     String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Tutor        Tutor[]
    Student      Student[]
    Admin        Admin[]
    profileId    String?
    Profile      Profile?
    Group        Group[]
    groupId      String?
    Participant  Participant[]
    Message      Message[]
    Notification Notification[]
    Feedback     Feedback[]
    Registration Registration[]
}

model Tutor {
    id           String         @id @default(cuid())
    user         User           @relation(fields: [userId], references: [id])
    userId       String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    CourseTutor  CourseTutor[]
    Session      Session[]
    Availability Availability[]
}

model Course {
    id          String        @id @default(cuid())
    name        String
    code        String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    CourseTutor CourseTutor[]
    Material    Material[]
    Quiz        Quiz[]
    Session     Session[]
    Assistant   Assistant?
    Section     Section[]
    Group       Group?
}

model Section {
    id           String         @id @default(cuid())
    title        String
    course       Course         @relation(fields: [courseId], references: [id])
    courseId     String
    startTime    DateTime
    endTime      DateTime
    recurrence   String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    registration Registration[]
    Group        Group?         @relation(fields: [groupId], references: [id])
    groupId      String?
}

model CourseTutor {
    id        String   @id @default(cuid())
    course    Course   @relation(fields: [courseId], references: [id])
    courseId  String
    tutor     Tutor    @relation(fields: [tutorId], references: [id])
    tutorId   String
    grade     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Student {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Admin {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Profile {
    id         String   @id @default(cuid())
    user       User     @relation(fields: [userId], references: [clerkId])
    userId     String   @unique
    major      String?
    phone      String?
    university String?
    standing   String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Material {
    id        String   @id @default(cuid())
    content   String
    course    Course   @relation(fields: [courseId], references: [id])
    courseId  String
    title     String
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Tag       Tag?     @relation(fields: [tagId], references: [id])
    tagId     String?
}

model Quiz {
    id        String     @id @default(cuid())
    course    Course     @relation(fields: [courseId], references: [id])
    courseId  String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Question  Question[]
}

model Question {
    id            String   @id @default(cuid())
    options       String[]
    correctAnswer String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    Quiz          Quiz?    @relation(fields: [quizId], references: [id])
    quizId        String?
}

model Session {
    id        String   @id @default(cuid())
    course    Course   @relation(fields: [courseId], references: [id])
    date      DateTime
    courseId  String
    title     String
    startTime DateTime
    tutor     Tutor    @relation(fields: [tutorId], references: [id])
    tutorId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Participant {
    id        String    @id @default(cuid())
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    group     Group     @relation(fields: [groupId], references: [id])
    groupId   String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Message   Message[]
}

model Message {
    id        String      @id @default(cuid())
    content   String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    sender    Participant @relation(fields: [senderId], references: [id])
    senderId  String
    group     Group       @relation(fields: [groupId], references: [id])
    groupId   String
    userId    String?
    User      User?       @relation(fields: [userId], references: [id])
}

model Group {
    id          String        @id @default(cuid())
    name        String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    course      Course        @relation(fields: [courseId], references: [id])
    courseId    String        @unique
    Participant Participant[]
    User        User[]
    Message     Message[]
    Section     Section[]
}

model Notification {
    id        String   @id @default(cuid())
    content   String
    seen      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

model Feedback {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

model Assistant {
    id        String   @id @default(cuid())
    course    Course   @relation(fields: [courseId], references: [id])
    courseId  String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Report {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id        String     @id @default(cuid())
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    material  Material[]
}

model Registration {
    id        String   @id @default(cuid())
    // course    Course   @relation(fields: [courseId], references: [id])
    // courseId  String
    sectionId String
    section   Section  @relation(fields: [sectionId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    semester  String   @default("241")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Availability {
    id        String   @id @default(cuid())
    day       String
    startTime DateTime
    endTime   DateTime
    tutor     Tutor    @relation(fields: [tutorId], references: [id])
    tutorId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
